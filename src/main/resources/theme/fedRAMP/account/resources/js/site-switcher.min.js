import t from "../../../@patternfly/pfelement/dist/pfelement.min.js";
/*!
 * PatternFly Elements: SiteSwitcher 0.0.5
 * @license
 * Copyright 2020 Red Hat, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */ class e extends t {
  static get version() {
    return "0.0.5";
  }
  get html() {
    return "<style>:host{display:block}:host([hidden]){display:none}\n/*# sourceMappingURL=site-switcher.min.css.map */\n</style><slot></slot>";
  }
  static get tag() {
    return "site-switcher";
  }
  static get properties() {
    return {
      _lang: { title: "Language support", type: String, default: "en" },
    };
  }
  static get slots() {
    return {};
  }
  get templateUrl() {
    return "site-switcher.html";
  }
  get styleUrl() {
    return "site-switcher.scss";
  }
  static get PfeType() {
    return t.PfeTypes.Content;
  }
  constructor() {
    super(e, { type: e.PfeType }), (this._dataRequest = !1);
  }
  connectedCallback() {
    super.connectedCallback(), this._requestSiteSwitcher();
  }
  disconnectedCallback() {}
  _requestSiteSwitcher() {
    if (!this._dataRequest) {
      new Promise((t, e) => {
        const s = new XMLHttpRequest();
        s.open(
          "GET",
          "https://www.redhat.com/" + this._lang + "/cms/ajax/site-switcher"
        ),
          (s.responseType = "text"),
          (s.onload = () => {
            s.status >= 400
              ? e(s.responseText)
              : (t(s.responseText),
                (this.innerHTML = s.responseText),
                (this._dataRequest = !0));
          }),
          (s.onerror = (t) => {
            this._siteSwitchLoadingIndicator.setAttribute("hidden", !0),
              e(t, "Something went wrong.");
          }),
          s.send();
      });
    }
  }
}
t.create(e);
export default e;
//# sourceMappingURL=site-switcher.min.js.map
